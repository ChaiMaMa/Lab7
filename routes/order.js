const express = require('express');
const router = express.Router();
const sql = require('mssql');
const moment = require('moment');
const query = require('../utilities/query').query;

router.get('/', async function(req, res, next) {
    res.setHeader('Content-Type', 'text/html');
    res.write("<title>ChaiMaMa</title>");

    try{
        let productList = false;
        if (req.session.productList) {
            productList = req.session.productList;
        } else{
            throw new Error("No product list");
        }
      
        let customer = await query(`select * from customer 
                                        where customerId = @customerId`,
                                        {customerId : req.query.customerId});

        //check if customerid is number and customerid in database
        if(!customer){
            throw new Error("Invalid customerId");
        }

        //store order in databse
        let customerInfo = customer.recordset[0];

        let totalAmt = 0;

        let result = await query(`insert into ordersummary(orderDate,shiptoAddress,shiptoCity,shiptoState,shiptoPostalCode,shiptoCountry,customerId) 
                                  output inserted.orderId 
                                  values(@orderDate,@shiptoAddress,@shiptoCity,@shiptoState,@shiptoPostalCode,@shiptoCountry,@customerId)`
                                  ,{orderDate : moment().format('YYYY-MM-DD hh:mm:ss'), 
                                  shiptoAddress: customerInfo.address, 
                                  shiptoCity: customerInfo.city, 
                                  shiptoState: customerInfo.state, 
                                  shiptoPostalCode: customerInfo.postalCode, 
                                  shiptoCountry: customerInfo.country, 
                                  customerId: customerInfo.customerId});

        // Catch errors generated by the query
        let orderId = null;
        if(!result){
            throw new Error("Unable to add order to database");
        }else{
            orderId = result.recordset[0].orderId;
        }

        //count total amount and add product to orderproduct
        for(let productId in productList){
            
            totalAmt += productList[productId].price * productList[productId].quantity;

            await query(`
                insert into orderproduct 
                output inserted.productId
                values(
                    @orderId,
                    @productId,
                    @quantity,
                    @price
                )`
                ,{
                 orderId: orderId,
                 productId: productId,
                 quantity: productList[productId].quantity,
                 price: productList[productId].price  
                });

        }

        await query(`

            update ordersummary
            set totalAmount = ${totalAmt}
            where orderId = ${orderId}

        `);

        //print ordersummary
        res.write(`
            <body>
                <h1>Your Order Summary</h1>
                <table>
                    <tr>
                        <th>Product Id</th>
                        <th>Product Name</th>
                        <th>Quantity</th>
                        <th>Price</th>
                        <th>Subtotal</th>
                    </tr>
        `);

        let orderProducts = await query(
            `
            select o.productId as productId, productName as name, quantity, price, (price * quantity) as subtotal 
            from orderproduct o join product p
            on o.productId = p.productId
            where orderId = @orderId

            `,
            {orderId : orderId}
        );

        for(let i = 0; i < orderProducts.recordset.length; i++){
            let orderProduct = orderProducts.recordset[i];
            res.write(
                `
                <tr>
                    <td>${orderProduct.productId}</td>
                    <td>${orderProduct.name}</td>
                    <td align = "center">${orderProduct.quantity}</td>
                    <td align = "right">$${orderProduct.price}</td>
                    <td align = "right">$${orderProduct.subtotal}</td>
                </tr>
                `
            );
        }

        res.write(`
        
        <tr>
            <td colspan="4" align="right">
                <b>Order Total</b>
            </td>
            <td align="right">$${totalAmt}</td>
        </tr>

        `);

        res.write("</table></body>");

        res.write(`
            
            <h1>Order completed. Will be shipped soon...</h1>
            <h1>Your order reference number is: ${orderId}</h1>
            <h1>Shipping to customer: ${customerInfo.customerId}</h1>
            <h1>Name: ${customerInfo.firstName + " " + customerInfo.lastName }</h1>

            `);

        res.write('<h2><a href="/">Return to shopping</a></h2>');


    }catch(err){
        if(err.message == "Invalid customerId"){
            res.write("<h1>Invalid customer id. Go back to the previous page and try again.</h1>");
        }else if(err.message == "No product list"){
            res.write("<h1>Your cart is empty</h1>");
        }else if(err.message == "Unable to add order to database"){
            res.write("<h1>Unable to add order to database</h1>");
        }else{
            res.write("<h1>Error connecting to database: " + err + "</h1>");
        }
        console.dir(err);
    }
    /**
    Determine if valid customer id was entered
    Determine if there are products in the shopping cart
    If either are not true, display an error message
    **/

    /** Make connection and validate **/

    /** Save order information to database**/


        /**
        // Use retrieval of auto-generated keys.
        sqlQuery = "INSERT INTO <TABLE> OUTPUT INSERTED.orderId VALUES( ... )";
        let result = await pool.request()
            .input(...)
            .query(sqlQuery);
        // Catch errors generated by the query
        let orderId = result.recordset[0].orderId;
        **/

    /** Insert each item into OrderedProduct table using OrderId from previous INSERT **/

    /** Update total amount for order record **/

    /** For each entry in the productList is an array with key values: id, name, quantity, price **/

    /**
        for (let i = 0; i < productList.length; i++) {
            let product = products[i];
            if (!product) {
                continue;
            }
            // Use product.id, product.name, product.quantity, and product.price here
        }
    **/

    /** Print out order summary **/

    /** Clear session/cart **/

    res.end();
});

module.exports = router;
